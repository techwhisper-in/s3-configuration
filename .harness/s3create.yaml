pipeline:
  name: s3-configuration
  identifier: s3
  projectIdentifier: myfirstproject
  orgIdentifier: default
  tags: {}
  variables:
    - name: Stage_to_Run
      type: String
      required: true
      value: <+input>.default(Plan).allowedValues(Plan,Apply,Destroy)
    - name: infra_create
      type: String
      required: true
      value: <+input>.default(true).allowedValues(true,false)
    - name: aws_account_number
      type: String
      required: true
      value: <+input>.default(590183834329)
    - name: statefile_bucket_region
      type: String
      required: true
      value: <+input>.default(ap-south-1).allowedValues(us-east-1,ap-south-1)
    - name: infra_region
      type: String
      required: true
      value: <+input>.default(ap-south-1).allowedValues(us-east-1,ap-south-1)
    - name: infra_tags
      type: String
      required: true
      value: <+input>.default({})
    - name: connector_Ref
      identifier: connector
      type: String
      required: true
      spec:
        connectorRef: <+input>
      value: <+spec.connectorRef>
  stages:
    - stage:
        name: Plan
        identifier: plan
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: TerraformPlan
                  name: TerraformPlan_1
                  identifier: TerraformPlan_1
                  spec:
                    provisionerIdentifier: main
                    configuration:
                      command: Apply
                      configFiles:
                        store:
                          spec:
                            connectorRef: connect_to_techwhisperin
                            repoName: s3-configuration
                            gitFetchType: Branch
                            branch: main
                            folderPath: S3-create
                          type: Github
                      providerCredential:
                        type: Aws
                        spec:
                          connectorRef: <+input>
                          region: <pipeline.variables.infra_region>
                          roleArn: ""
                      backendConfig:
                        type: Inline
                        spec:
                          content: |-
                            role_arn = "arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user"
                            bucket = "techwhisper-ami-snapshot-ebs-volume-inventory"
                            key = "file/create-s3.tfstate"
                            region = "<+pipeline.variables.statefile_bucket_region>"
                      varFiles:
                        - varFile:
                            spec:
                              content: |-
                                assume_role_arn = "arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user"
                                infra_create = <+pipeline.variables.infra_create>
                                infra_account = "<+pipeline.variables.aws_account_number>"
                                infra_region = "<+pipeline.variables.infra_region>"
                                infra_tags = <+pipeline.variables.infra_tags>
                            identifier: tfvars_variable
                            type: Inline
                      secretManagerRef: harnessSecretManager
                      skipRefreshCommand: false
                  timeout: 10m
        tags: {}
        when:
          pipelineStatus: Success
          condition: <+pipeline.variables.Stage_to_Run> == "Plan"
    - stage:
        name: Apply
        identifier: Apply
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: TerraformApply
                  name: TerraformApply_1
                  identifier: TerraformApply_1
                  spec:
                    provisionerIdentifier: main
                    configuration:
                      type: Inline
                      spec:
                        configFiles:
                          store:
                            spec:
                              connectorRef: connect_to_techwhisperin
                              repoName: s3-configuration
                              gitFetchType: Branch
                              branch: main
                              folderPath: S3-create
                            type: Github
                        providerCredential:
                          type: Aws
                          spec:
                            connectorRef: <+input>
                            region: ap-south-1
                            roleArn: ""
                        backendConfig:
                          type: Inline
                          spec:
                            content: |-
                              role_arn = "arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user"
                              bucket = "techwhisper-ami-snapshot-ebs-volume-inventory"
                              key = "file/create-s3.tfstate"
                              region = "<+pipeline.variables.statefile_bucket_region>"
                        varFiles:
                          - varFile:
                              spec:
                                content: |-
                                  assume_role_arn = "arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user"
                                  infra_create = <+pipeline.variables.infra_create>
                                  infra_account = "<+pipeline.variables.aws_account_number>"
                                  infra_region = "<+pipeline.variables.infra_region>"
                                  infra_tags = <+pipeline.variables.infra_tags>
                              identifier: tfvars_variable
                              type: Inline
                  timeout: 10m
        tags: {}
        when:
          pipelineStatus: Success
          condition: <+pipeline.variables.Stage_to_Run> == "Apply"
    - stage:
        name: Destroy
        identifier: Destroy
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: TerraformDestroy
                  name: TerraformDestroy_1
                  identifier: TerraformDestroy_1
                  spec:
                    provisionerIdentifier: main
                    configuration:
                      type: Inline
                      spec:
                        configFiles:
                          store:
                            spec:
                              connectorRef: connect_to_techwhisperin
                              repoName: s3-configuration
                              gitFetchType: Branch
                              branch: main
                              folderPath: S3-create
                            type: Github
                        providerCredential:
                          type: Aws
                          spec:
                            connectorRef: <+input>
                            region: ap-south-1
                            roleArn: arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user
                        backendConfig:
                          type: Inline
                          spec:
                            content: |-
                              role_arn = "arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user"
                              bucket = "techwhisper-ami-snapshot-ebs-volume-inventory"
                              key = "file/create-s3.tfstate"
                              region = "<+pipeline.variables.statefile_bucket_region>"
                        varFiles:
                          - varFile:
                              spec:
                                content: |-
                                  assume_role_arn = "arn:aws:iam::<+pipeline.variables.aws_account_number>:role/operation_role_for_execution_user"
                                  infra_create = <+pipeline.variables.infra_create>
                                  infra_account = "<+pipeline.variables.aws_account_number>"
                                  infra_region = "<+pipeline.variables.infra_region>"
                                  infra_tags = <+pipeline.variables.infra_tags>
                              identifier: trfvars
                              type: Inline
                  timeout: 10m
        tags: {}
        when:
          pipelineStatus: Success
          condition: <+pipeline.variables.Stage_to_Run> == "Destroy"
